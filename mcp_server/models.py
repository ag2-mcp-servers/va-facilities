# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:28:18+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class Address(BaseModel):
    address_1: Optional[str] = Field(None, examples=['50 Irving Street, Northwest'])
    address_2: Optional[str] = Field(None, examples=['Bldg 2'])
    address_3: Optional[str] = Field(None, examples=['Suite 7'])
    city: Optional[str] = Field(None, examples=['Washington'])
    state: Optional[str] = Field(None, examples=['DC'])
    zip: Optional[str] = Field(None, examples=['20422-0001'])


class Addresses(BaseModel):
    mailing: Optional[Address] = None
    physical: Optional[Address] = None


class AppointmentPhoneNumber(BaseModel):
    extension: Optional[str] = Field(None, examples=['71234'])
    label: Optional[str] = Field(None, examples=['Main phone'])
    number: Optional[str] = Field(None, examples=['937-268-6511'])
    type: Optional[str] = Field(None, examples=['tel'])


class DetailedServiceAddress(BaseModel):
    address_line1: Optional[str] = Field(None, examples=['50 Irving Street, Northwest'])
    address_line2: Optional[str] = None
    building_name_number: Optional[str] = Field(
        None,
        description='Building name and/or number of service.',
        examples=['Baxter Building'],
    )
    city: Optional[str] = Field(None, examples=['Washington'])
    clinic_name: Optional[str] = Field(
        None, description='Clinic name for service.', examples=['Baxter Clinic']
    )
    country_code: Optional[str] = Field(None, examples=['US'])
    state: Optional[str] = Field(None, examples=['DC'])
    wing_floor_or_room_number: Optional[str] = Field(
        None,
        description='Wing, floor, or room number of service.',
        examples=['Wing East'],
    )
    zip_code: Optional[str] = Field(None, examples=['20422-0001'])


class DetailedServiceEmailContact(BaseModel):
    email_address: Optional[str] = Field(None, examples=['georgea@va.gov'])
    email_label: Optional[str] = Field(None, examples=['George Anderson'])


class DetailedServiceHours(BaseModel):
    Friday: Optional[str] = Field(None, examples=['9AM-5PM'])
    Monday: Optional[str] = Field(None, examples=['9AM-5PM'])
    Saturday: Optional[str] = Field(None, examples=['Closed'])
    Sunday: Optional[str] = Field(None, examples=['Closed'])
    Thursday: Optional[str] = Field(None, examples=['9AM-5PM'])
    Tuesday: Optional[str] = Field(None, examples=['9AM-5PM'])
    Wednesday: Optional[str] = Field(None, examples=['9AM-5PM'])


class DetailedServiceLocation(BaseModel):
    additional_hours_info: Optional[str] = Field(
        None,
        description='Additional information related to service location hours.',
        examples=['Location hours times may vary depending on staff availability'],
    )
    appointment_phones: Optional[List[AppointmentPhoneNumber]] = Field(
        None, description='List of appointment phone information.'
    )
    email_contacts: Optional[List[DetailedServiceEmailContact]] = Field(
        None, description='List of email contact information.'
    )
    facility_service_hours: Optional[DetailedServiceHours] = None
    service_location_address: Optional[DetailedServiceAddress] = None


class Distance(BaseModel):
    distance: float
    id: str


class ErrorMessage(BaseModel):
    code: Optional[str] = Field(None, examples=['103'])
    detail: Optional[str] = Field(None, examples=['Detailed error message'])
    status: Optional[str] = Field(None, examples=['400'])
    title: Optional[str] = Field(None, examples=['Error title'])


class FacilitiesIdsResponse(BaseModel):
    data: Optional[List[str]] = Field(None, examples=[['vha_688']])


class Type(Enum):
    va_facilities = 'va_facilities'


class ActiveStatus(Enum):
    A = 'A'
    T = 'T'


class FacilityType(Enum):
    va_benefits_facility = 'va_benefits_facility'
    va_cemetery = 'va_cemetery'
    va_health_facility = 'va_health_facility'
    vet_center = 'vet_center'


class GenericError(BaseModel):
    message: str = Field(..., examples=['Detailed Error Message'])


class Type1(Enum):
    FeatureCollection = 'FeatureCollection'


class Type2(Enum):
    Feature = 'Feature'


class Type4(Enum):
    Point = 'Point'


class Geometry(BaseModel):
    coordinates: Optional[List[float]] = Field(
        None, examples=[[-77.0367761, 38.9004181]], max_length=2, min_length=2
    )
    type: Type4 = Field(..., examples=['Point'])


class Hours(BaseModel):
    friday: Optional[str] = Field(None, examples=['9AM-5PM'])
    monday: Optional[str] = Field(None, examples=['9AM-5PM'])
    saturday: Optional[str] = Field(None, examples=['Closed'])
    sunday: Optional[str] = Field(None, examples=['Closed'])
    thursday: Optional[str] = Field(None, examples=['9AM-5PM'])
    tuesday: Optional[str] = Field(None, examples=['9AM-5PM'])
    wednesday: Optional[str] = Field(None, examples=['9AM-5PM'])


class Meta(BaseModel):
    band_version: Optional[str] = Field(None, examples=['APR2021'])


class Type5(Enum):
    NearbyFacility = 'NearbyFacility'


class NearbyAttributes(BaseModel):
    max_time: int = Field(..., examples=[20])
    min_time: int = Field(..., examples=[10])


class Code(Enum):
    NORMAL = 'NORMAL'
    NOTICE = 'NOTICE'
    LIMITED = 'LIMITED'
    CLOSED = 'CLOSED'


class OperatingStatus(BaseModel):
    additional_info: Optional[constr(min_length=0, max_length=300)] = Field(
        None,
        description='Details of facility notices for visitors, such as messages about parking lot closures or floor visitation information.',
    )
    code: Code = Field(
        ...,
        description='Status codes indicate normal hours/services, limited hours/services, closed operations, or published facility notices for visitors.',
        examples=['NORMAL'],
    )


class PageLinks(BaseModel):
    first: Optional[str] = None
    last: Optional[str] = None
    next: Optional[str] = None
    prev: Optional[str] = None
    related: Optional[str] = Field(
        None, description='/services/va_facilities/v0/facilities?id=vha_688'
    )
    self: str


class Pagination(BaseModel):
    current_page: int = Field(..., examples=[1])
    per_page: int = Field(..., examples=[10])
    total_entries: int = Field(..., examples=[2162])
    total_pages: int = Field(..., examples=[217])


class PatientSatisfaction(BaseModel):
    primary_care_routine: Optional[float] = Field(
        None,
        description='% of Veterans who say they usually or always get an appointment when they need it at a primary care location.',
        examples=[0.85],
    )
    primary_care_urgent: Optional[float] = Field(
        None,
        description='% of Veterans who say they usually or always get an appointment when they need care right away at a primary care location.',
        examples=[0.85],
    )
    specialty_care_routine: Optional[float] = Field(
        None,
        description='% of Veterans who say they usually or always get an appointment when they need it at a specialty location.',
        examples=[0.85],
    )
    specialty_care_urgent: Optional[float] = Field(
        None,
        description='% of Veterans who say they usually or always get an appointment when they need care right away at a specialty location.',
        examples=[0.85],
    )


class Service(Enum):
    Audiology = 'Audiology'
    Cardiology = 'Cardiology'
    CaregiverSupport = 'CaregiverSupport'
    Covid19Vaccine = 'Covid19Vaccine'
    DentalServices = 'DentalServices'
    Dermatology = 'Dermatology'
    EmergencyCare = 'EmergencyCare'
    Gastroenterology = 'Gastroenterology'
    Gynecology = 'Gynecology'
    MentalHealthCare = 'MentalHealthCare'
    Ophthalmology = 'Ophthalmology'
    Optometry = 'Optometry'
    Orthopedics = 'Orthopedics'
    Nutrition = 'Nutrition'
    Podiatry = 'Podiatry'
    PrimaryCare = 'PrimaryCare'
    SpecialtyCare = 'SpecialtyCare'
    UrgentCare = 'UrgentCare'
    Urology = 'Urology'
    WomensHealth = 'WomensHealth'


class PatientWaitTime(BaseModel):
    established: Optional[float] = Field(
        None,
        description='Average number of days a patient who has already been to this location has to wait for a non-urgent appointment.',
        examples=[5],
    )
    new: Optional[float] = Field(
        None,
        description="Average number of days a Veteran who hasn't been to this location has to wait for a non-urgent appointment.",
        examples=[10],
    )
    service: Service


class Phone(BaseModel):
    after_hours: Optional[str] = Field(None, examples=['202-555-1212'])
    enrollment_coordinator: Optional[str] = Field(None, examples=['202-555-1212'])
    fax: Optional[str] = Field(None, examples=['202-555-1212'])
    main: Optional[str] = Field(None, examples=['202-555-1212'])
    mental_health_clinic: Optional[str] = Field(None, examples=['202-555-1212'])
    patient_advocate: Optional[str] = Field(None, examples=['202-555-1212'])
    pharmacy: Optional[str] = Field(None, examples=['202-555-1212'])


class Satisfaction(BaseModel):
    effective_date: Optional[date] = Field(None, examples=['2018-01-01'])
    health: Optional[PatientSatisfaction] = None


class Benefit(Enum):
    ApplyingForBenefits = 'ApplyingForBenefits'
    BurialClaimAssistance = 'BurialClaimAssistance'
    DisabilityClaimAssistance = 'DisabilityClaimAssistance'
    eBenefitsRegistrationAssistance = 'eBenefitsRegistrationAssistance'
    EducationAndCareerCounseling = 'EducationAndCareerCounseling'
    EducationClaimAssistance = 'EducationClaimAssistance'
    FamilyMemberClaimAssistance = 'FamilyMemberClaimAssistance'
    HomelessAssistance = 'HomelessAssistance'
    InsuranceClaimAssistanceAndFinancialCounseling = (
        'InsuranceClaimAssistanceAndFinancialCounseling'
    )
    IntegratedDisabilityEvaluationSystemAssistance = (
        'IntegratedDisabilityEvaluationSystemAssistance'
    )
    Pensions = 'Pensions'
    PreDischargeClaimAssistance = 'PreDischargeClaimAssistance'
    TransitionAssistance = 'TransitionAssistance'
    UpdatingDirectDepositInformation = 'UpdatingDirectDepositInformation'
    VAHomeLoanAssistance = 'VAHomeLoanAssistance'
    VocationalRehabilitationAndEmploymentAssistance = (
        'VocationalRehabilitationAndEmploymentAssistance'
    )


class HealthEnum(Enum):
    Audiology = 'Audiology'
    Cardiology = 'Cardiology'
    CaregiverSupport = 'CaregiverSupport'
    Covid19Vaccine = 'Covid19Vaccine'
    DentalServices = 'DentalServices'
    Dermatology = 'Dermatology'
    EmergencyCare = 'EmergencyCare'
    Gastroenterology = 'Gastroenterology'
    Gynecology = 'Gynecology'
    MentalHealthCare = 'MentalHealthCare'
    Ophthalmology = 'Ophthalmology'
    Optometry = 'Optometry'
    Orthopedics = 'Orthopedics'
    Nutrition = 'Nutrition'
    Podiatry = 'Podiatry'
    PrimaryCare = 'PrimaryCare'
    SpecialtyCare = 'SpecialtyCare'
    UrgentCare = 'UrgentCare'
    Urology = 'Urology'
    WomensHealth = 'WomensHealth'


class OtherEnum(Enum):
    OnlineScheduling = 'OnlineScheduling'


class Services(BaseModel):
    benefits: Optional[List[Benefit]] = None
    health: Optional[List[HealthEnum]] = None
    last_updated: Optional[date] = Field(None, examples=['2018-01-01'])
    other: Optional[List[OtherEnum]] = None


class WaitTimes(BaseModel):
    effective_date: Optional[date] = Field(None, examples=['2018-01-01'])
    health: Optional[List[PatientWaitTime]] = None


class Type6(Enum):
    health = 'health'
    cemetery = 'cemetery'
    benefits = 'benefits'
    vet_center = 'vet_center'


class Ids(RootModel[List[str]]):
    root: List[str]


class Bbox(RootModel[List[float]]):
    root: List[float] = Field(..., max_length=4, min_length=4)


class Services1(RootModel[List[str]]):
    root: List[str]


class Accept(Enum):
    application_geo_json = 'application/geo+json'
    application_vnd_geo_json = 'application/vnd.geo+json'
    text_csv = 'text/csv'


class DriveTime(Enum):
    integer_10 = 10
    integer_20 = 20
    integer_30 = 30
    integer_40 = 40
    integer_50 = 50
    integer_60 = 60
    integer_70 = 70
    integer_80 = 80
    integer_90 = 90


class ApiError(BaseModel):
    errors: List[ErrorMessage]


class DetailedService(BaseModel):
    appointment_leadin: Optional[str] = Field(
        None,
        description='Additional appointment information. May contain html / string formatting characters.',
        examples=[
            "Your VA health care team will contact you if you???re eligible to get a vaccine during this time. As the supply of vaccine increases, we'll work with our care teams to let Veterans know their options."
        ],
    )
    appointment_phones: Optional[List[AppointmentPhoneNumber]] = Field(
        None,
        description='List of phone numbers related to scheduling appointments for this service.',
    )
    description_facility: Optional[str] = Field(
        None, description='Deprecated until further notice.', examples=['null']
    )
    name: Optional[str] = Field(
        None, description='Service name.', examples=['COVID-19 vaccines']
    )
    online_scheduling_available: Optional[str] = Field(
        None,
        description='String detailing online scheduling availability.',
        examples=['True'],
    )
    path: Optional[str] = Field(
        None,
        description="URL to a page with additional details for this service within the associated facility's health care system.",
        examples=['https://www.boston.va.gov/services/covid-19-vaccines.asp'],
    )
    referral_required: Optional[str] = Field(
        None,
        description='String detailing if referrals are required for the service.',
        examples=['False'],
    )
    service_locations: Optional[List[DetailedServiceLocation]] = Field(
        None, description='List of service locations.'
    )
    walk_ins_accepted: Optional[str] = Field(
        None,
        description='String detailing if walk-ins are accepted for the service.',
        examples=['True'],
    )


class FacilitiesMetadata(BaseModel):
    distances: List[Distance]
    pagination: Pagination


class FacilityAttributes(BaseModel):
    active_status: Optional[ActiveStatus] = Field(
        None,
        description='This field is deprecated and replaced with "operating_status".',
    )
    address: Optional[Addresses] = None
    classification: Optional[str] = Field(None, examples=['VA Medical Center (VAMC)'])
    detailed_services: Optional[List[DetailedService]] = None
    facility_type: FacilityType = Field(..., examples=['va_health_facility'])
    hours: Optional[Hours] = None
    lat: float = Field(..., description='Facility latitude', examples=[38.9311137])
    long: float = Field(
        ..., description='Facility longitude', examples=[-77.0109110499999]
    )
    mobile: Optional[bool] = Field(None, examples=[False])
    name: str = Field(..., examples=['Washington VA Medical Center'])
    operating_status: OperatingStatus
    operational_hours_special_instructions: Optional[str] = Field(
        None,
        examples=[
            'Normal business hours are Monday through Friday, 8:00 a.m. to 4:30 p.m.'
        ],
    )
    phone: Optional[Phone] = None
    satisfaction: Optional[Satisfaction] = None
    services: Optional[Services] = None
    time_zone: Optional[str] = Field(
        None, description='Facility time zone', examples=['America/New_York']
    )
    visn: Optional[str] = Field(None, examples=['20'])
    wait_times: Optional[WaitTimes] = None
    website: Optional[str] = Field(None, examples=['http://www.washingtondc.va.gov'])


class Nearby(BaseModel):
    attributes: NearbyAttributes
    id: str = Field(..., examples=['vha_688'])
    type: Type5 = Field(..., examples=['va_health_facility'])


class NearbyResponse(BaseModel):
    data: List[Nearby]
    meta: Optional[Meta] = None


class Properties(BaseModel):
    active_status: Optional[ActiveStatus] = None
    address: Optional[Addresses] = None
    classification: Optional[str] = Field(None, examples=['VA Medical Center (VAMC)'])
    detailed_services: Optional[List[DetailedService]] = None
    facility_type: FacilityType
    hours: Optional[Hours] = None
    id: str = Field(..., examples=['vha_688'])
    mobile: Optional[bool] = Field(None, examples=[False])
    name: Optional[str] = Field(None, examples=['Washington VA Medical Center'])
    operating_status: OperatingStatus
    operational_hours_special_instructions: Optional[str] = Field(
        None, examples=['Administrative hours are Monday-Friday 8:00 a.m. to 4:30 p.m.']
    )
    phone: Optional[Phone] = None
    satisfaction: Optional[Satisfaction] = None
    services: Optional[Services] = None
    time_zone: Optional[str] = Field(
        None, description='Facility time zone', examples=['America/New_York']
    )
    visn: Optional[str] = Field(None, examples=['20'])
    wait_times: Optional[WaitTimes] = None
    website: Optional[str] = Field(None, examples=['http://www.washingtondc.va.gov'])


class Facility(BaseModel):
    attributes: FacilityAttributes
    id: str = Field(..., examples=['vha_688'])
    type: Type


class FacilityReadResponse(BaseModel):
    data: Facility


class GeoFacility(BaseModel):
    geometry: Geometry
    properties: Properties
    type: Type2 = Field(..., examples=['Feature'])


class GeoFacilityReadResponse(BaseModel):
    geometry: Geometry
    properties: Properties
    type: Type2


class FacilitiesResponse(BaseModel):
    data: Optional[List[Facility]] = None
    links: PageLinks
    meta: FacilitiesMetadata


class GeoFacilitiesResponse(BaseModel):
    features: Optional[List[GeoFacility]] = None
    type: Type1
