# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:28:18+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Query

from models import (
    Accept,
    ApiError,
    Bbox,
    DriveTime,
    FacilitiesIdsResponse,
    GenericError,
    GeoFacilitiesResponse,
    GeoFacilityReadResponse,
    Ids,
    NearbyResponse,
    Services1,
    Type6,
)

app = MCPProxy(
    contact={'name': 'developer.va.gov'},
    description='## Background\n\nThis RESTful API provides information about physical VA facilities. Information available includes\ngeographic location, address, phone, hours of operation, and available services.\n\nVA operates several different types of facilities, the types represented in this API include:\n- Health Facilities (vha)\n- Benefits Facilities (vba)\n- Cemeteries (nca)\n- Vet Centers (vc)\n\nTo read an FAQ on how wait times are calculated, click the "For more information" link on [this page](https://www.accesstocare.va.gov/PWT/SearchWaitTimes).\n\n## Getting Started\n\n### Base URLs\n\nThe base URLs for the VA Facilities API in the various environments are:\n- Sandbox: `https://sandbox-api.va.gov/services/va_facilities/v0`\n- Production: `https://api.va.gov/services/va_facilities/v0`\n\n### Authorization\n\nAPI requests are authorized through a symmetric API token, provided in an HTTP header with name `apikey`.\n\n### Response Formats\n\nClients may request several response formats by setting the `Accept` header.\n- `application/json` - The default JSON response format complies with JSON API. This media type is *not* available for bulk requests using the `/facilities/all` endpoint. It will return `406 Not Acceptable`.\n- `application/geo+json` - GeoJSON-compliant format, representing each facility as a feature with a point geometry.\n- `application/vnd.geo+json` - Deprecated. Prefer application/geo+json.\n- `text/csv` - Available for the bulk download operation only. Some structured fields are omitted from the CSV response.\n\n### Response Elements\n\nSome data elements within the response are only present for facilities of a given type:\n- The patient satisfaction scores contained in the `satisfaction` element are only applicable\n  to VA health facilities.\n- The patient wait time values contained in the `wait_times` element are only applicable to\n  VA health facilities.\n- The list of available services in the `services` element is only applicable to VA health and\n  benefits facilities.\n- The operational hours special instructions contained in the `operational_hours_special_instructions` element is only applicable to VA health and Vet Center facilities.\n\n### Facility ID Formats and Constraints\n\nA facility ID has the format `prefix_stationNumber`. The prefix is one of nca, vc, vba, or vha. Cemeteries may be national (VA) or non-national; non-national cemeteries have the station number prefixed with an `s`. There are no other constraints on the format. Examples:\n- Health: `vha_402GA`\n- Benefits: `vba_539GB`\n- National cemetery: `nca_063`\n- Non-national cemetery: `nca_s1082`\n- Vet center: `vc_0872MVC`\n\n\n### Mobile Facilities\n\nThe mobile health facilities move regularly within a region. If a facility comes back from this API with `"mobile": "true"`, the latitude/longitude and address could be inaccurate. To get the exact current location, please call the number listed.\n\n## Deprecations\n\n- `active_status` field is deprecated and replaced with `operating_status`.\n- `application/vnd.geo+json` media type is deprecated and replaced by `application/geo+json`\n\n\n## Reference\n\n- [Raw VA Facilities Open API Spec](https://api.va.gov/services/va_facilities/docs/v0/api)\n- [GeoJSON Format](https://tools.ietf.org/html/rfc7946)\n- [JSON API Format](https://jsonapi.org/format/)',
    title='VA Facilities',
    version='0.0.1',
    servers=[
        {
            'description': 'Sandbox',
            'url': 'https://sandbox-api.va.gov/services/va_facilities/{version}',
            'variables': {'version': {'default': 'v0'}},
        },
        {
            'description': 'Production',
            'url': 'https://api.va.gov/services/va_facilities/{version}',
            'variables': {'version': {'default': 'v0'}},
        },
    ],
)


@app.get(
    '/facilities',
    description=""" Query facilities by bounding box, latitude and longitude, state, visn, or zip code. Bounding box is specified as four `bbox[]` parameters, long1, lat1, long2, lat2. (Relative order is unimportant.)

A query by latitude and longitude returns all facilities in the system, sorted by distance from that location.

All location queries support filtering by facility type, available services, and mobile status.

One can also retrieve facilities by ID using a comma-separated list like `?ids=id1,id2`. When requesting multiple facilities by ID, the API will return as many results as it can find matches for, omitting IDs where there is no match. It will not return an HTTP error code if it is unable to match a requested ID. Clients may supply IDs up to the limit their HTTP client enforces for URI path lengths. (Usually 2048 characters.)

Results are paginated. JSON responses include pagination information in the standard JSON API "links" and "meta" elements. 

### Parameter combinations
You may optionally specify `page` and `per_page` with any query. You must specify one of the following parameter combinations: 

- `bbox[]`, with the option of any combination of `type`, `services[]`, or `mobile`

- `ids`

- `lat` and `long`, with the option of any combination of `ids`, `type`, `services[]`, or `mobile`

- `state`, with the option of any combination of `type`, `services[]`, or `mobile`

- `visn`

- `zip`, with the option of any combination of `type`, `services[]`, or `mobile`

 Invalid combinations will return `400 Bad Request`. """,
    tags=['facility_info_retrieval'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def get_facilities_by_location(
    ids: Optional[Ids] = None,
    zip: Optional[str] = None,
    state: Optional[str] = None,
    lat: Optional[float] = None,
    long: Optional[float] = None,
    bbox__: Optional[Bbox] = Query(None, alias='bbox[]'),
    visn: Optional[float] = None,
    type: Optional[Type6] = None,
    services__: Optional[Services1] = Query(None, alias='services[]'),
    mobile: Optional[bool] = None,
    page: Optional[int] = 1,
    per_page: Optional[int] = 10,
):
    """
    Query facilities by location or IDs, with optional filters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/facilities/all',
    description=""" Retrieve all available facilities in a single operation, formatted as either a GeoJSON FeatureCollection or as a CSV. Due to the complexity of the facility resource type, the CSV response contains a subset of available facility data - specifically it omits the available services, patient satisfaction, and patient wait time data. """,
    tags=['facility_info_retrieval'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def get_all_facilities(accept: Accept = Header(..., alias='Accept')):
    """
    Bulk download information for all facilities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/facilities/{id}',
    tags=['facility_info_retrieval'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def get_facility_by_id(id: str):
    """
    Retrieve a specific facility by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ids',
    description=""" Retrieves all available facility IDs only """,
    tags=['facility_info_retrieval'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def get_facility_ids(type: Optional[Type6] = None):
    """
    Bulk download of all facility IDs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nearby',
    description=""" Retrieve all VA health facilities that are located within a specified drive time from a specified location based on address (`street_address`, `city`, `state`, and `zip`) or coordinates (`lat` and `lng`). Optional filter parameters include `drive_time` and `services[]`. 

Results of this operation are paginated. Responses include pagination information in the standard JSON API "links" and "meta" elements. 

The "attributes" element has information about the drive-time band that contains the requested location for each facility in the response. The values of `min_time` and `max_time` are in minutes. For example, a facility returned with a matched `min_time` of 10 and `max_time` of 20 is a 10 to 20 minute drive from the requested location.

To retrieve full details for nearby facilities, see the documentation for `/facilities?ids`. """,
    tags=['facility_info_retrieval'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def get_nearby_facilities(
    street_address: Optional[str] = None,
    city: Optional[str] = None,
    state: Optional[str] = None,
    zip: Optional[str] = None,
    lat: Optional[float] = None,
    lng: Optional[float] = None,
    drive_time: Optional[DriveTime] = 90,
    services__: Optional[Services1] = Query(None, alias='services[]'),
    page: Optional[int] = 1,
    per_page: Optional[int] = 20,
):
    """
    Retrieve all VA health facilities reachable by driving within the specified time period
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
